import 'package:mek_data_class/mek_data_class.dart';
import 'package:mek_stripe_terminal/src/models/card.dart';
import 'package:mek_stripe_terminal/src/models/charge.dart';
import 'package:mek_stripe_terminal/src/models/payment_method.dart';
import 'package:mek_stripe_terminal/src/models/tip.dart';
import 'package:meta/meta.dart';

part 'payment_intent.g.dart';

/// A [PaymentIntent] tracks the process of collecting a payment from your customer. We recommend
/// that you create exactly one [PaymentIntent] for each order or customer session in your system.
/// You can reference the [PaymentIntent] later to see the history of payment attempts for a particular session.
///
/// A [PaymentIntent] transitions through multiple statuses throughout its lifetime and ultimately
/// creates at most one successful charge.
@DataClass()
class PaymentIntent with _$PaymentIntent {
  /// The unique identifier for the intent.
  ///
  /// If the intent was created offline the [id] will be nil. See offlineDetails.stripeId for a
  /// unique ID to use while offline.
  /// After the payment has been forwarded the intent’s [id] will be filled in.
  final String id;

  /// When the intent was created.
  final DateTime created;

  /// The status of the PaymentIntent.
  final PaymentIntentStatus status;

  /// The amount to be collected by this [PaymentIntent], provided in the currency’s smallest unit.
  final double amount;

  /// Controls when the funds will be captured from the customer’s account.
  final CaptureMethod captureMethod;

  /// The currency of the payment.
  final String currency;

  /// Set of key-value pairs attached to the object.
  final Map<String, String> metadata;

  /// Charges that were created by this PaymentIntent, if any.
  final List<Charge> charges;

  /// The payment method to be used in this PaymentIntent. Only valid in the intent returned during collectPaymentMethod when using the updatePaymentIntent option in the SCPCollectConfiguration.
  final PaymentMethod? paymentMethod;

  /// ID of the payment method used in this PaymentIntent.
  final String? paymentMethodId;

  /// Details about items included in the amount after confirmation.
  final AmountDetails? amountDetails;

  /// Indicates how much the user intends to tip in addition to the amount by at confirmation time.
  /// This is only non-null in the [PaymentIntent] instance returned during collect when using
  /// updatePaymentIntent set to true in the CollectConfiguration.
  ///
  /// After [Terminal.confirmPaymentIntent] the amount will have this tip amount added
  /// to it and the [amountDetails] will contain the breakdown of how much of the amount was a tip.
  final double? amountTip;

  /// Extra information about a [PaymentIntent]. This will appear on your customer’s statement
  /// when this [PaymentIntent] succeeds in creating a charge.
  final String? statementDescriptor;

  /// Extra dynamic information about a [PaymentIntent]. This will appear concatenated with the
  /// [statementDescriptor] on your customer’s statement when this [PaymentIntent] succeeds in creating a charge.
  final String? statementDescriptorSuffix;

  // !!! ONLY ON ANDROID !!!

  /// Amount that can be captured from this [PaymentIntent].
  final double? amountCapturable;

  /// Amount that was collected by this [PaymentIntent].
  final double? amountReceived;

  /// ID of the Connect application that created the [PaymentIntent].
  final String? applicationId;

  /// The amount of the application fee for this [PaymentIntent].
  final double? applicationFeeAmount;

  /// Reason for cancellation of this [PaymentIntent], either user-provided (duplicate, fraudulent,
  /// requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice,
  /// void_invoice, or automatic).
  final String? cancellationReason;

  /// Populated when status is [PaymentIntentStatus.canceled], this is the time at which
  /// the [PaymentIntent] was canceled.
  final DateTime? canceledAt;

  /// Get the client secret returned by this intent.
  final String? clientSecret;

  /// One of automatic (default) or manual. When the confirmation method is automatic, a [PaymentIntent]
  /// can be confirmed using a publishable key. After next_actions are handled, no additional confirmation
  /// is required to complete the payment.
  final ConfirmationMethod? confirmationMethod;

  /// ID of the Customer this PaymentIntent belongs to, if one exists. If present, payment methods
  /// used with this [PaymentIntent] can only be attached to this Customer, and payment methods
  /// attached to other Customers cannot be used with this [PaymentIntent].
  final String? customerId;

  /// An arbitrary string attached to the [PaymentIntent]. Often useful for displaying to users.
  final String? description;

  /// ID of the invoice that created this PaymentIntent, if it exists.
  final String? invoiceId;

  /// Return the account that the PaymentIntent is on behalf of
  final String? onBehalfOf;

  /// ID of the review associated with this PaymentIntent, if any.
  final String? reviewId;

  /// Email address that the receipt for the resulting payment will be sent to.
  final String? receiptEmail;

  /// Value of setup_future_usage associated with this [PaymentIntent], if any.
  final PaymentIntentUsage? setupFutureUsage;

  /// Get the transfer group of this PaymentIntent
  final String? transferGroup;

  @internal
  const PaymentIntent({
    required this.id,
    required this.amount,
    required this.amountCapturable,
    required this.amountReceived,
    required this.created,
    required this.status,
    required this.applicationFeeAmount,
    required this.amountTip,
    required this.statementDescriptor,
    required this.statementDescriptorSuffix,
    this.metadata = const {},
    required this.charges,
    required this.paymentMethod,
    required this.amountDetails,
    required this.applicationId,
    required this.captureMethod,
    required this.cancellationReason,
    required this.canceledAt,
    required this.clientSecret,
    required this.confirmationMethod,
    required this.currency,
    required this.customerId,
    required this.description,
    required this.invoiceId,
    required this.onBehalfOf,
    required this.paymentMethodId,
    required this.reviewId,
    required this.receiptEmail,
    required this.setupFutureUsage,
    required this.transferGroup,
  });
}

/// The possible statuses for a [PaymentIntent].
///
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status
enum PaymentIntentStatus {
  /// The [PaymentIntent] was canceled.
  canceled,

  /// The [PaymentIntent] is in the middle of full EMV processing.
  processing,

  /// Next step: capture the [PaymentIntent] on your backend via the Stripe API.
  requiresCapture,

  /// Next step: confirm the payment by calling [Terminal.confirmPaymentIntent].
  requiresConfirmation,

  /// Next step: collect a payment method by calling [Terminal.collectPaymentMethod].
  requiresPaymentMethod,

  /// Next step: the payment requires additional actions, such as authenticating with 3D Secure.
  ///
  /// PaymentIntents collected with the Terminal SDK should not end in the requires_action status.
  requiresAction,

  /// The [PaymentIntent] succeeded.
  succeeded,
}

/// Contains details about items included in the [PaymentIntent] amount
class AmountDetails {
  /// Details about the tip
  final Tip? tip;

  @internal
  const AmountDetails({
    required this.tip,
  });
}

// PARAMETERS

@DataClass()
class PaymentIntentParameters with _$PaymentIntentParameters {
  /// The amount of the payment, provided in the currency’s smallest unit.
  final int amount;

  /// Three-letter ISO currency code, in lowercase. Must be a supported currency.
  final String currency;

  /// The capture method that this PaymentIntent should use.
  final CaptureMethod captureMethod;

  /// The list of payment method types that this PaymentIntent is allowed to use.
  final List<PaymentMethodType> paymentMethodTypes;

  /// Set of key-value pairs that you can attach to an object. This can be useful for storing
  /// additional information about the object in a structured format.
  final Map<String, String> metadata;

  /// An arbitrary string attached to the object. If you send a receipt email for this payment,
  /// the email will include the description.
  final String? description;

  /// A string to be displayed on your customer’s credit card statement. This may be up to 22 characters.
  /// The statement descriptor must contain at least one letter, may not include <>"' characters,
  /// and will appear on your customer’s statement in capital letters. Non-ASCII characters
  /// are automatically stripped. While most banks and card issuers display this information consistently,
  /// some may display it incorrectly or not at all.
  final String? statementDescriptor;

  /// A string to specify details about the transaction so your customer can understand it clearly
  /// on their statement. The suffix is concatenated with the statementDescriptor, the * symbol,
  /// and a space to form the complete statement descriptor that your customer sees. Maximum 22
  /// characters for the final concatenated descriptor.
  final String? statementDescriptorSuffix;

  /// Email address that the receipt for the resulting payment will be sent to.
  final String? receiptEmail;

  /// The ID of the Customer this [PaymentIntent] is for, if one exists.
  final String? customerId;

  /// The amount of the application fee (if any) that will be applied to the payment and transferred
  /// to the application owner’s Stripe account. To use an application fee, the request must be made
  /// on behalf of another account, using the stripeAccount property or an OAuth key.
  final int? applicationFeeAmount;

  /// The account (if any) the payment will be attributed to for tax reporting, and where funds
  /// from the payment will be transferred to upon payment success.
  ///
  /// At capture time, use `transfer_data[amount]` to specify the amount that will be transferred
  /// automatically when a charge succeeds.
  ///
  /// When [transferDataDestination] is specified, [onBehalfOf] must also be specified and must
  /// match the destination of the transfer.
  final String? transferDataDestination;

  /// A string that identifies the resulting payment as part of a group.
  final String? transferGroup;

  /// The Stripe account ID for which these funds are intended.
  ///
  /// When [transferDataDestination] is specified, [onBehalfOf] must also be specified and
  /// must match the destination of the transfer.
  final String? onBehalfOf;

  /// Indicates that you intend to make future payments with this [PaymentIntent]’s payment method.
  ///
  /// Providing this parameter will attach the payment method to the [PaymentIntent]’s Customer,
  /// after the [PaymentIntent] is confirmed and any required actions from the user are complete.
  /// If no Customer was provided, the payment method can still be attached to a Customer after
  /// the transaction completes.
  final PaymentIntentUsage? setupFutureUsage;

  /// Specific options used during the creation of the PaymentMethod.
  final PaymentMethodOptionsParameters? paymentMethodOptionsParameters;

  PaymentIntentParameters({
    required this.amount,
    required this.currency,
    this.captureMethod = CaptureMethod.manual,
    this.paymentMethodTypes = const [PaymentMethodType.cardPresent],
    this.metadata = const {},
    this.description,
    this.statementDescriptor,
    this.statementDescriptorSuffix,
    this.receiptEmail,
    this.customerId,
    this.applicationFeeAmount,
    this.transferDataDestination,
    this.transferGroup,
    this.onBehalfOf,
    this.setupFutureUsage,
    this.paymentMethodOptionsParameters,
  });
}

/// Controls when the funds will be captured from the customer’s account.
enum CaptureMethod {
  /// Stripe automatically captures funds when the customer authorizes the payment.
  automatic,

  /// Place a hold on the funds when the customer authorizes the payment, but don’t capture
  /// the funds until later. Will require an explicit call to capture payments.
  /// (Not all payment methods support this.)
  manual
}

enum ConfirmationMethod {
  /// After next_actions are handled, no additional confirmation is required to complete the payment.
  automatic,

  /// All payment attempts must be made using a secret key. The PaymentIntent returns to the
  /// requires_confirmation state after handling next_actions, and requires your server to
  /// initiate each payment attempt with an explicit confirmation.
  manual,
}

enum PaymentIntentUsage {
  /// Use “on_session” if you intend to only reuse the payment method when your customer
  /// is present in your checkout flow.
  onSession,

  /// Use “off_session” if your customer may or may not be present in your checkout flow.
  offSession
}

/// The PaymentMethodOptionsParameters contains options for PaymentMethod creation.
@DataClass()
class PaymentMethodOptionsParameters with _$PaymentMethodOptionsParameters {
  /// Card-present-specific configuration for this PaymentMethod.
  final CardPresentParameters cardPresentParameters;

  const PaymentMethodOptionsParameters({
    required this.cardPresentParameters,
  });
}
